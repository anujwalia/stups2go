SenzaInfo:
  StackName: go-agent
  Parameters:
  - DockerImage:
      Description: go-agent Docker image to use.
  - GoServerDomain:
      Description: go-server https endpoint.
  - GoAgentRegistrationKey:
      Description: go-server key for auto registration for agents.
  - GoAgentEnvironments:
      Description: Comma separated list of environments this agent supports.
  - GoAgentCount:
      Description: Count of go-agent's to run in parallel.
  - InstanceType:
      Description: AWS instance type of your go-server.
  - ApplicationId:
      Description: ID of the registered application to use for robot access.
  - AccessTokenUrl:
      Description: URL of your OAuth2 access_token endpoint.
  - MintBucket:
      Description: Name of the application's mint bucket.
  - ScalyrKey:
      Description: Optional key for scalyr logging.
      Default: ""
  - LogentriesKey:
      Description: Optional key for logentries logging.
      Default: ""
  - AppdynamicsApplication:
      Description: Optional AppDynamics application name.
      Default: ""

SenzaComponents:
- Configuration:
    Type: Senza::StupsAutoConfiguration

Resources:
  GoAgentAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        "Fn::FindInMap":
        - "ServerSubnets"
        - Ref: "AWS::Region"
        - "Subnets"
      LaunchConfigurationName:
        Ref: "GoAgentLaunchConfig"
      MinSize: 1
      DesiredCapacity: "{{Arguments.GoAgentCount}}"
      MaxSize: "{{Arguments.GoAgentCount}}"

  GoAgentLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      UserData:
        "Fn::Base64":
          "Fn::Join":
          - "\n"
          - - "#taupage-ami-config"
            - "application_id: {{Arguments.ApplicationId}}"
            - "application_version: {{SenzaInfo.StackVersion}}"
            - "runtime: Docker"
            - "source: '{{Arguments.DockerImage}}'"
            - "root: true"
            - "docker_daemon_access: true"
            - "mint_bucket: {{Arguments.MintBucket}}"
            - "{{#Arguments.ScalyrKey}}scalyr_account_key: '{{Arguments.ScalyrKey}}'{{/Arguments.ScalyrKey}}"
            - "{{#Arguments.LogentriesKey}}logentries_account_key: '{{Arguments.LogentriesKey}}'{{/Arguments.LogentriesKey}}"
            - "{{#Arguments.AppdynamicsApplication}}appdynamics_application: '{{Arguments.AppdynamicsAplication}}'{{/Arguments.AppdynamicsApplication}}"
            - "environment:"
            - "  STUPS_GO_SERVER_DOMAIN: '{{Arguments.GoServerDomain}}'"
            - "  STUPS_GO_AGENT_REGISTRATION_KEY: '{{Arguments.GoAgentRegistrationKey}}'"
            - "  STUPS_GO_AGENT_ENVIRONMENTS: '{{Arguments.GoAgentEnvironments}}'"
            - "  OAUTH2_ACCESS_TOKEN_URL: '{{Arguments.AccessTokenUrl}}?realm=/services'"
            - "mounts:"
            - "  /var/lib/go-agent:"
            - "    partition: /dev/xvdf"
            - "    erase_on_boot: true"
      ImageId:
        "Fn::FindInMap":
        - "Images"
        - Ref: "AWS::Region"
        - "LatestTaupageImage"
      InstanceType: "{{Arguments.InstanceType}}"
      IamInstanceProfile:
        Ref: GoAgentProfile
      SecurityGroups:
      - "Fn::GetAtt":
        - "GoAgentSecurityGroup"
        - "GroupId"
      BlockDeviceMappings:
      - DeviceName: "/dev/sdf"
        Ebs:
          VolumeSize: 100

  GoAgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: go-agent security group
      SecurityGroupIngress:
      # for debugging via piu
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  GoAgentProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
      - Ref: GoAgentRole

  GoAgentRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - "sts:AssumeRole"
      Policies:
      - PolicyName: GoAgentAllowMintRead
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Sid: "AllowMintRead"
            Action:
            - "s3:GetObject"
            - "s3:ListBucket"
            Effect: Allow
            Resource:
            - "arn:aws:s3:::{{Arguments.MintBucket}}"
            - "arn:aws:s3:::{{Arguments.MintBucket}}/{{Arguments.ApplicationId}}/*"
