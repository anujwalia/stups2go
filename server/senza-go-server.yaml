SenzaInfo:
  StackName: go-server
  Parameters:
  - DockerImage:
      Description: go-server Docker image to use.
  - HostedZone:
      Description: Domain to setup for this go-server.
  - SSLCertificateId:
      Description: The SSL certificate to use on the load balancer.
  - PrivateSubnetId:
      Description: The private subnet ID of the availability zone's matching subnet.
  - PublicSubnetId:
      Description: The public subnet ID of the availability zone's matching subnet.
  - InstanceType:
      Description: AWS instance type of your go-server.
  - ImageId:
      Description: Latest Taupage AMI ID.

SenzaComponents:
- Configuration:
    Type: Senza::StupsAutoConfiguration

Resources:
  GoServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - "{{Arguments.PrivateSubnetId}}"
      LaunchConfigurationName:
        Ref: "GoServerLaunchConfig"
      MinSize: 1
      MaxSize: 1
      LoadBalancerNames:
      - Ref: "GoServerLoadBalancer"

  GoServerLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      UserData:
        "Fn::Base64":
          "Fn::Join":
          - "\n"
          - - "#taupage-ami-config"
            - "application_id: go-server"
            - "application_version: default"
            - "runtime: Docker"
            - "source: '{{Arguments.DockerImage}}'"
            - "root: true"
            - "ports:"
            - "  8153: 8153"
            - "volumes:"
            - "  ebs:"
            - "    /dev/sdf: go-server-volume"
            - "mounts:"
            - "  /var/lib/go-server:"
            - "    partition: /dev/xvdf"
            - "    erase_on_boot: false"
      ImageId: "{{Arguments.ImageId}}"
      InstanceType: "{{Arguments.InstanceType}}"
      IamInstanceProfile: "go-server-profile"
      SecurityGroups:
      - "Fn::GetAtt":
        - "GoServerSecurityGroup"
        - "GroupId"

  GoServerLoadBalancer:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      LoadBalancerName: "GoServerLoadBalancer"
      Subnets:
      - "{{Arguments.PublicSubnetId}}"
      Listeners:
      - LoadBalancerPort: "443"
        InstancePort: "8153"
        Protocol: "HTTPS"
        SSLCertificateId: "{{Arguments.SSLCertificateId}}"
      SecurityGroups:
      - "Fn::GetAtt":
        - "GoServerLBSecurityGroup"
        - "GroupId"

  GoServerLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: go-server load balancer security group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  GoServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: go-server security group
      SecurityGroupIngress:
      # for debugging via piu
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      # HTTP from load balancer
      - IpProtocol: tcp
        FromPort: 8153
        ToPort: 8153
        SourceSecurityGroupId:
          "Fn::GetAtt":
          - "GoServerLBSecurityGroup"
          - "GroupId"

  GoServerDomain:
    Type: "AWS::Route53::RecordSet"
    Properties:
      Name: "delivery.{{Arguments.HostedZone}}."
      HostedZoneName: "{{Arguments.HostedZone}}."
      Type: "CNAME"
      ResourceRecords:
      - "Fn::GetAtt":
        - "GoServerLoadBalancer"
        - "DNSName"
      TTL: 30

